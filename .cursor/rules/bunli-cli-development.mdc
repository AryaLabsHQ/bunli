---
description: 
globs: 
alwaysApply: false
---
# Bunli CLI Development Patterns

Follow these patterns when developing CLI functionality in the Bunli framework.

## Command Structure

Commands follow a consistent pattern using the core framework:

```typescript
// In any command file (e.g., packages/cli/src/commands/build.ts)
import { defineCommand, option } from '@bunli/core'
import { z } from 'zod'

export const buildCommand = defineCommand({
  name: 'build',
  description: 'Build the project',
  options: {
    // Define options with Zod validation
    output: option(
      z.string().default('dist'),
      { description: 'Output directory', short: 'o' }
    ),
    compress: option(
      z.boolean().default(false),
      { description: 'Compress output' }
    )
  },
  handler: async ({ flags, positional, shell, env, cwd, prompt, spinner, colors, context }) => {
    // Access type-safe flags
    const spin = spinner(`Building to ${flags.output}...`)
    spin.start()
    
    // Access plugin context if available
    if (context?.env.isAIAgent) {
      console.log(`AI Agent detected: ${context.store.aiAgents.join(', ')}`)
    }
    
    // Implementation
    await shell`bun build src/index.ts --outdir ${flags.output}`
    spin.succeed('Build complete!')
  }
})
```

## Configuration

- Use [bunli.config.ts](mdc:examples/minimal/bunli.config.ts) files for project configuration
- Configuration is defined using [packages/core/src/types.ts](mdc:packages/core/src/types.ts)
- See examples in [examples/](mdc:examples) for different config patterns

## File Naming

- Use kebab-case for all files: `my-command.ts` not `MyCommand.ts`
- Commands go in `commands/` directory
- Use `.js` extensions for all local imports (ESM requirement)
- Keep files focused on single responsibilities

## Error Handling

- Use utilities from the handler context: `colors.error()`, `colors.warn()`, `colors.info()`
- Throw meaningful errors with helpful messages
- Zod schemas provide automatic validation for command options
- Use validation from [packages/utils/src/validation.ts](mdc:packages/utils/src/validation.ts)

## Testing

- Write tests using Bun's built-in test runner
- Use testing utilities from [packages/test/](mdc:packages/test)
- Test files should be in `test/` directories with `.test.ts` suffix
- Follow patterns in [packages/test/test/](mdc:packages/test/test) for advanced scenarios

## Plugin Integration

- Use the plugin system from [packages/core/src/plugin/](mdc:packages/core/src/plugin)
- Plugins provide type-safe stores accessible in command handlers
- Create plugins with `createPlugin` helper:

```typescript
import { createPlugin } from '@bunli/core/plugin'

interface MyStore {
  count: number
  messages: string[]
}

const myPlugin = createPlugin<MyStore>({
  name: 'my-plugin',
  store: {
    count: 0,
    messages: []
  },
  beforeCommand({ store }) {
    store.count++
  }
})
```

- Register plugins in CLI creation:

```typescript
const cli = await createCLI({
  name: 'my-cli',
  plugins: [
    aiAgentPlugin(),
    configMergerPlugin({ sources: ['.myrc.json'] }),
    myPlugin
  ] as const // Use 'as const' for better type inference
})
```
