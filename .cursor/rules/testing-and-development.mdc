---
description: 
globs: 
alwaysApply: false
---
# Testing and Development Workflow

Guidelines for testing and development practices in the Bunli CLI framework.

## Testing Framework

- Use **Bun's built-in test runner** with `bun test`
- Test files should have `.test.ts` suffix in `test/` directories
- Use testing utilities from [packages/test/](mdc:packages/test) for CLI-specific testing

## Test Structure

```typescript
// Example test file structure
import { describe, it, expect } from 'bun:test'
import { testCommand } from '@bunli/test'
import { myCommand } from '../src/commands/my-command.js'

describe('My Command', () => {
  it('should execute successfully', async () => {
    const result = await testCommand(myCommand, {
      flags: { input: 'test' }  // Note: use 'flags', not 'args'
    })
    
    expect(result.exitCode).toBe(0)
    expect(result.stdout).toContain('success')
  })
  
  it('should handle positional arguments', async () => {
    const result = await testCommand(myCommand, {
      flags: { verbose: true },
      args: ['file1.txt', 'file2.txt']  // 'args' is for positional arguments
    })
    
    expect(result.stdout).toContain('file1.txt')
  })
  
  it('should handle plugin context', async () => {
    const result = await testCommand(myCommand, {
      flags: { verbose: true },
      context: {
        store: {
          someData: 'test data'
        }
      }
    })
    
    expect(result.stdout).toContain('test data')
  })
})
```

## Testing Patterns

- **Unit tests**: Test individual functions and classes
- **Command tests**: Use [packages/test/src/test-command.ts](mdc:packages/test/src/test-command.ts) for CLI testing
- **Integration tests**: Test complete workflows in [packages/test/test/advanced-scenarios.test.ts](mdc:packages/test/test/advanced-scenarios.test.ts)

## Development Commands

From the root directory:

- `bun dev` - Start development mode with watch
- `bun test` - Run all tests
- `bun run build` - Build all packages
- `bun run clean` - Clean build artifacts

## Package-Specific Development

Each package has its own development setup:

- `bun run build` in package directory
- Individual test commands
- Build scripts in `scripts/build.ts`

## Examples and Templates

- Use [examples/](mdc:examples) as working references
- Test new features against multiple example projects
- Update templates in [packages/create-bunli/templates/](mdc:packages/create-bunli/templates) when adding features

## Debugging

- Use Bun's built-in debugger: `bun --inspect`
- Add logging with the color utilities from [packages/utils/src/colors.ts](mdc:packages/utils/src/colors.ts)
- Test CLI commands in isolation using the test utilities
- Use `bunli dev` for hot-reload development

## Plugin Testing

- Plugins should have comprehensive tests in their `test/` directories
- Test plugin lifecycle hooks and store functionality:

```typescript
import { describe, it, expect } from 'bun:test'
import { createCLI } from '@bunli/core'
import { myPlugin } from '../src'

describe('My Plugin', () => {
  it('should update store in beforeCommand', async () => {
    const cli = await createCLI({
      name: 'test-cli',
      plugins: [myPlugin({ verbose: true })]
    })
    
    // Test plugin behavior
  })
})
```

- Test type inference and store merging with multiple plugins
- Verify plugin options are handled correctly

## Continuous Integration

- Tests run on each package using the [turbo.jsonc](mdc:turbo.jsonc) pipeline
- Build and test scripts are coordinated across the monorepo
- Use `bun` commands throughout the CI process
